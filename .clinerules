# Video Training Service プロジェクトガイドライン

## プロジェクト概要
- 社内向け動画ストリーミング研修サービス
- AWS CDKによるインフラ構築
- Reactフロントエンド
- Python Lambda関数によるバックエンド

## 使用パターン
- ユーザー数: 約200名の社内ユーザー
- アクセス頻度: 各ユーザー月2回程度
- 想定同時アクセス数: ピーク時20-40ユーザー程度（全社研修時など）
- 動画サイズ: 平均15-30分程度の研修動画
- 使用パターン: 
  - 定期的な全社研修や部門別研修（同時アクセス）
  - ユーザーが個別に自分のペースで研修を受講（分散アクセス）

## セキュリティのベストプラクティス

### 機密ファイル
以下のファイルは読み取りや変更を行わないでください：
- .env ファイル
- **/config/*.ts ファイル内の認証情報
- *.pem ファイル
- API キー、トークン、認証情報を含むファイル
- SAML メタデータファイル

### セキュリティプラクティス
- 機密情報はコミットしない
- 環境変数を使用して機密情報を管理する
- 認証情報をログや出力に含めない
- AWS SSMパラメータストアを使用して設定値を管理する
- VPCエンドポイントを最大限活用し、インターネット経由の通信を最小化する
- セキュリティグループとNACLを適切に設定し、必要最小限のトラフィックのみを許可する
- すべてのAWSリソースへのアクセスは最小権限の原則に従う

## ネットワークセキュリティ
- ユーザーアクセスは必ずVPN経由で行う（Site-to-Site VPNまたはClient VPN）
- インターネットとの通信は最小限に制限する
- 可能な限りVPCエンドポイントを使用してAWSサービスにアクセスする
- Cognitoのみ、VPCエンドポイントが提供されていないため例外的にインターネットアクセスを許可
- 新しいAWSサービスを追加する場合は、VPCエンドポイントの利用可否を必ず確認する
- ネットワークファイアウォールのルールを適切に設定し、不要な通信を遮断する

## コードスタイルとパターン

### CDK (TypeScript)
- 各AWSリソースは独自のクラスとファイルに分離する
- コンストラクトパターンを使用する
- 設定値は`config.ts`から取得する
- リソース間の依存関係は明示的に定義する

### Lambda (Python)
- 各APIエンドポイントは独自のファイルに実装する
- 共通ユーティリティは`vt_util.py`に実装する
- 定数は`vt_const.py`に定義する
- エラーハンドリングとロギングを適切に実装する

### フロントエンド (React)
- コンポーネントベースの設計を使用する
- 各画面は独自のコンポーネントとして実装する
- 共通の定数は`Constants.js`に定義する
- APIリクエストは適切なエラーハンドリングを含める

## ドキュメント要件
- 機能変更時はREADMEを更新する
- アーキテクチャ変更時は図を更新する
- APIエンドポイントの変更はドキュメントに反映する

## テスト基準
- フロントエンドの変更はローカルテストサーバーを使用して動作確認を行う
